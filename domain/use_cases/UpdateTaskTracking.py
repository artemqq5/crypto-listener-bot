import asyncio
import logging

from aiogram import Bot
from config import ADMINS

from data.repositories.CoinsRepository import CoinsRepository
from data.repositories.SettingValuesRepository import SettingValuesRepository
from domain.notification.notification_change_price import changed_price_coin
from domain.use_cases.GetDataFromBinance import GetDataFromBinance


class UpdateTaskTracking:
    """–ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º —Ü—ñ–Ω –º–æ–Ω–µ—Ç."""

    _tasks = {}  # –ê–∫—Ç–∏–≤–Ω—ñ —Ç–∞—Å–∫–∏ –¥–ª—è –º–æ–Ω–µ—Ç
    _task_event = asyncio.Event()  # –ü–æ–¥—ñ—è –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ç–∞–π–º–µ—Ä–æ–º
    _bot = None  # –ï–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    _i18n = None  # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
    _last_notifications = {}  # –ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–æ–Ω–µ—Ç–∏
    _check_time = None  # –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (–æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ —É –ë–î)

    @classmethod
    def initialize(cls, bot: Bot, i18n):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∫–ª–∞—Å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º, –ø–µ—Ä–µ–¥–∞—é—á–∏ –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Ç–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—é."""
        cls._bot = bot
        cls._i18n = i18n

    @classmethod
    async def get_check_time_from_db(cls) -> int:
        """–û—Ç—Ä–∏–º—É—î –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (—É —Å–µ–∫—É–Ω–¥–∞—Ö) —Ç–∞ –æ–Ω–æ–≤–ª—é—î –≥–ª–æ–±–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É."""
        check_time = await SettingValuesRepository().param("check_time")
        if not check_time or "param_value" not in check_time:
            raise ValueError("‚õî –ß–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É –ë–î!")

        cls._check_time = (
            int(check_time["param_value"]) * 60
        )  # –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ —Ö–≤–∏–ª–∏–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∏
        return cls._check_time

    @classmethod
    async def update_check_time(cls):
        """–û–Ω–æ–≤–ª—é—î —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–æ–Ω–µ—Ç (—è–∫—â–æ –∑–º—ñ–Ω–∏–≤—Å—è —É –ë–î)."""
        try:
            new_check_time = await cls.get_check_time_from_db()
            if cls._check_time != new_check_time:
                logging.info(
                    f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {cls._check_time // 60} ‚Üí {new_check_time // 60} —Ö–≤"
                )
                cls._check_time = new_check_time
                cls._task_event.set()  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î –≤—Å—ñ —Ç–∞–π–º–µ—Ä–∏ –∑ –Ω–æ–≤–∏–º –ø–µ—Ä—ñ–æ–¥–æ–º
        except ValueError as e:
            logging.error(e)

    @classmethod
    async def check_coin(cls, coin: dict):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ü—ñ–Ω—É –º–æ–Ω–µ—Ç–∏, –∞–ª–µ —Ç–µ–ø–µ—Ä –ù–ï –≤–∏–∫–ª–∏–∫–∞—î —Å–µ–±–µ –∑–Ω–æ–≤—É, –∞ –∑–∞–Ω–æ–≤–æ –∑–∞–ø—É—Å–∫–∞—î –≤–µ—Å—å —Ü–∏–∫–ª."""
        await cls.update_check_time()  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª —É –ë–î

        logging.info(
            f"üîç –ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É {coin['coinname']} (—ñ–Ω—Ç–µ—Ä–≤–∞–ª: {cls._check_time // 60} —Ö–≤)..."
        )

        await cls.check_coin_value(coin)

    @classmethod
    async def start_all_checks(cls):
        """–ó–∞–ø—É—Å–∫–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –¥–ª—è –≤—Å—ñ—Ö –º–æ–Ω–µ—Ç. –ó–∞–≤–∂–¥–∏ –æ–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª—É."""
        try:
            await cls.get_check_time_from_db()  # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª —ñ–∑ –ë–î
        except ValueError as e:
            logging.error(e)
            return

        coins = await CoinsRepository().coins()

        for coin in coins:
            coin_name = coin["coinname"]

            logging.info(
                f"üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –¥–ª—è {coin_name} (–∫–æ–∂–Ω—ñ {cls._check_time // 60} —Ö–≤)..."
            )
            await cls.check_coin(
                coin
            )  # –¢–µ–ø–µ—Ä –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –±–µ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–π–≤–∏—Ö —Ç–∞—Å–∫—ñ–≤

        # –ß–µ–∫–∞—î–º–æ –∞–±–æ —Ç–∞–π–º–µ—Ä, –∞–±–æ –∫–æ–º–∞–Ω–¥—É `reset_timers()`
        try:
            await asyncio.wait_for(cls._task_event.wait(), timeout=cls._check_time)
        except asyncio.TimeoutError:
            pass  # –ß–∞—Å –≤–∏–π—à–æ–≤, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
        finally:
            cls._task_event.clear()  # –°–∫–∏–¥–∞—î–º–æ –ø–æ–¥—ñ—é –ø—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è

        # ‚ùó –ü—ñ—Å–ª—è –∑–∞—Ç—Ä–∏–º–∫–∏ –∑–∞–Ω–æ–≤–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ `start_all_checks()`, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ –∑ –ë–î
        asyncio.create_task(cls.start_all_checks())

    @classmethod
    async def reset_timers(cls):
        """–°–∫–∏–¥–∞—î —Ç–∞–π–º–µ—Ä–∏ –¥–ª—è –≤—Å—ñ—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ (–≤–∏–∫–æ–Ω—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–µ–≥–∞–π–Ω–æ)."""
        logging.info("‚ö° –°–∫–∏–¥–∞—î–º–æ –≤—Å—ñ —Ç–∞–π–º–µ—Ä–∏, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –Ω–µ–≥–∞–π–Ω–æ!")
        cls._task_event.set()  # –í–∏–∫–æ–Ω—É—î –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–µ–≥–∞–π–Ω–æ

    @classmethod
    async def check_coin_value(cls, coin_db: dict):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –º–æ–Ω–µ—Ç–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ."""
        if cls._bot is None or cls._i18n is None:
            raise RuntimeError(
                "üö® UpdateTaskTracking –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ! –í–∏–∫–ª–∏—á—Ç–µ UpdateTaskTracking.initialize(bot, i18n) –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º."
            )

        coin_html = GetDataFromBinance(coin_db["coinname"]).get_binance_data()
        if not coin_html:
            return

        new_price = coin_html["last_value"]
        old_price = coin_db["last_value"]
        difference = new_price - old_price

        current_time = asyncio.get_event_loop().time()
        last_notification_time = cls._last_notifications.get(coin_db["coinname"], 0)
        time_since_last_notification = current_time - last_notification_time

        logging.info(
            f"üìä {coin_db['coinname']} -> –°—Ç–∞—Ä–∞ —Ü—ñ–Ω–∞: {old_price}, –ù–æ–≤–∞ —Ü—ñ–Ω–∞: {new_price}, –†—ñ–∑–Ω–∏—Ü—è: {difference}"
        )

        if abs(difference) > coin_db["difference_value"]:
            if time_since_last_notification >= cls._check_time:
                logging.info(
                    f"üì¢ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è {coin_db['coinname']} –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!"
                )

                await CoinsRepository().update_price(coin_db["coinname"], new_price)

                cls._last_notifications[coin_db["coinname"]] = current_time

                await changed_price_coin(
                    coin_label=coin_db["coin_label"],
                    difference=difference,
                    new_price=new_price,
                    old_price=old_price,
                    check_time=cls._check_time / 60,
                    user_id=ADMINS[0],
                    bot=cls._bot,
                    i18n=cls._i18n,
                )
            else:
                logging.info(
                    f"‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è {coin_db['coinname']} ‚Äì —â–µ –Ω–µ –º–∏–Ω—É–≤ —ñ–Ω—Ç–µ—Ä–≤–∞–ª —á–∞—Å—É."
                )
